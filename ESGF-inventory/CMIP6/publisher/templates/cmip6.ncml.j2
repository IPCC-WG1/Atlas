<?xml version="1.0" encoding="UTF-8"?>
{% set localpath = ('GLOBALS', 'localpath') %}
{% set variable = ('GLOBALS', '_DRS_variable') %}
{% set size = ('GLOBALS', 'size') %}
{% set frequency = ('GLOBALS', 'frequency') %}
{% set lat_coord = df.iloc[0][(df.iloc[0] =='latitude')].index[0][0] %}
{% set lon_coord = df.iloc[0][(df.iloc[0] =='longitude')].index[0][0] %}
{% set fxs = (['areacella', 'areacello', 'areacellr', 'basin', 'deptho',
               'gridspec', 'hfgeou', 'lm', 'mrsofc', 'orog', 'orograw',
               'rootd', 'sftgif', 'sftlf', 'sftof', 'thkcello', 'volcello', 'zfull']) %}
<netcdf xmlns="http://www.unidata.ucar.edu/namespaces/netcdf/ncml-2.2">
  <attribute name="primary_variables" value="{{ ','.join(df[variable].unique()) }}"/>
  <attribute name="size" type="int" value="{{ df[size].sum()|int }}" />
  <attribute name="size_human" value="{{ df[size].sum()|filesizeformat }}" />

  <remove name="tracking_id" type="attribute" />
  <remove name="variable_id" type="attribute" />
  <remove name="version" type="attribute" />

<!--
  <variable name="{{ lon_coord }}" type="double" shape="{{ df[(lon_coord, '_dimensions')].iloc[0] }}">
    <values>{{ df[(lon_coord, '_values')].iloc[0].ravel() | join(" ") }}</values>
  </variable>
  {% if (lon_coord + '_bnds', 'values') in df.columns %}
  <variable name="{{ lon_coord }}_bnds" type="double" shape="{{ df[(lon_coord, '_dimensions')].iloc[0] }}, 2">
    <values>{{ df[(lon_coord + '_bnds', '_values')].iloc[0].ravel() | join(" ") }}</values>
  </variable>
  {% endif %}
-->

  {% if (df[('GLOBALS', '_time_same_coordinate')].all()) and 
        ((df[('time', 'units')].dropna().unique())|length == 1) and
        (not df[('GLOBALS', '_require_custom_time')].any()) %}
    {% for name,group in df[df[frequency] != 'fx'].groupby((variable)) %}
  <variable name="{{ name }}" shape="time {{ lat_coord }} {{ lon_coord }}">
    <attribute name="version" type="string" value="v{{ ','.join(group[('GLOBALS', '_DRS_version')].unique()|list|map('string')) }}" />
    <attribute name="tracking_ids" type="string" value="{{ ','.join(group[('GLOBALS', 'tracking_id')]) }}" />
    {% if group[('GLOBALS', '_DRS_model')].iloc[0] in ['CESM2-WACCM', 'CESM2'] %}
    <!-- CESM2-WACCM need to redifine coordinates -->
    <attribute name="coordinates" value="time {{ lat_coord }} {{ lon_coord }}" />
    {% endif %}
  </variable>
    {% endfor %}
  {% else %}
    {% for name,group in df[df[frequency] != 'fx'].groupby((variable)) %}
  <dimension name="time_{{ name }}" length="{{ group[('_d_time', 'size')].sum()|int }}" />
  <variable name="time_{{ name }}" type="double" shape="time_{{ name }}">
    {% for i in group['time'].columns %}
    {% if i not in ['_values', '_dimensions'] %}
    <attribute name="{{ i }}" value="{{ group.iloc[0][('time', i)] }}" />
    {% endif %}
    {% endfor %}
    <values>{{ group.sort_values(by=[('GLOBALS', '_DRS_period1')])[('time', '_values')]|_values|join(' ') }}</values>
  </variable>
  <variable name="{{ group[variable].iloc[0] }}" shape="time_{{ name }} {{ lat_coord }} {{ lon_coord }}">
    <attribute name="version" type="string" value="v{{ ','.join(group[('GLOBALS', '_DRS_version')].unique()|list|map('string')) }}" />
    <attribute name="tracking_ids" type="string" value="{{ ','.join(group[('GLOBALS', 'tracking_id')]) }}" />
    {% if group[('GLOBALS', '_DRS_model')].iloc[0] in ['CESM2-WACCM', 'CESM2'] %}
    <!-- CESM2-WACCM need to redifine coordinates -->
    <attribute name="coordinates" value="time_{{ name }} {{ lat_coord }} {{ lon_coord }}" />
    {% endif %}
  </variable>
  {% endfor %}
  {% endif %}

  <aggregation type="union">
    {% for name,group in df[df[frequency] != 'fx'].sort_values(by=[variable]).groupby(variable) %}
    <netcdf>
      <aggregation type="joinExisting" dimName="time">
        {% for index, row in group.sort_values(by=[('GLOBALS', '_DRS_period1')]).iterrows() %}
        <netcdf location="{{ row[localpath] }}" ncoords="{{ row[('_d_time', 'size')]|int }}" />
        {% endfor %}
      </aggregation>
    </netcdf>
    {% endfor %}

    {% for index, row in df[df[frequency] == 'fx']['GLOBALS'].iterrows() %}
    <netcdf location="{{ row['localpath'] }}" />
    {% endfor %}
  </aggregation>
</netcdf>
